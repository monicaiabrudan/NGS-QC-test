---
title: "Manual"
format: html
---

## Read Alignment

### 1.1 Introduction

Sequence alignment in NGS is the process of determining the most likely source of the observed DNA sequencing read within the reference genome sequence.

### ![sequence alignment](images/sequence%20alignment.png)

1.2 Why align?

There are typical inferences you can make from an alignment of NGS data against a reference genome:

• Variation from the reference – could have functional consequence.

• Transcript abundance: Instead of a microarray, you could use alignment to genome to quantify expression: more sensitive

• Ab-initio transcript discovery: you can see a pileup from RNA seq data showing evidence for an exon which was previously missed or an exon which is being skipped in a transcript.

### 

![why align](images/why%20align.png) 1.2 Learning outcomes

On completion of the tutorial, you can expect to be able to:

• Perform read alignment using standard tools (BWA-MEM)

• Perform the following task and understand their effect on analysis results

– Mark Duplicates

• Visualise read alignments using IGV (Integrated Visualisation Tool)

If there is time you will learn how to:

• Merge the results from multiple alignments and understand when it is appropriate to perform a merge

### 1.3 Tutorial sections

This tutorial comprises the following sections:

1\. Performing read alignment

2\. Alignment visualisation

There is also an additional (optional) section: 3. Alignment workflows

### 1.4 Authors

This tutorial was written by Jacqui Keane based on material from Thomas Keane, Vivek Iyer and Victoria Offord.

### 1.5 Running the commands from this tutorial

You can follow this tutorial by typing all the commands you see into a terminal window. This is similar to the “Command Prompt” window on MS Windows systems, which allows the user to type DOS commands to manage files.

To get started, open a new terminal on your computer and type the command below:

`cd /home/manager/course_data/read_alignment` Now you can follow the instructions in the tutorial from here.

### 1.6 Let’s get started!

This tutorial assumes that you have samtools, bwa, Picard tools and IGV installed on your computer.

These are already installed on the VM you are using. To check that these are installed, you can run the following commands:

`samtools --help`

`bwa`

`picard -h`

`igv`

This should return the help message for samtools, bwa and Picard tools respectively. The final command should launch the genome viewer IGV. You can close the IGV software, we will use it later in this tutorial to visualise alignments.

To get started with the tutorial, head to the first section: Performing read alignment

## 

2.  Performing Read Alignment

Here we will use the BWA aligner to align a smll set of Illumina sequencing data to the Mus Musculus reference genome. We will align genomic sequence (from Whole-Genome Sequencing) from a mouse embryo which has been mutagenised while the one-cell stage using CRISPR-Cas9 and a gRNA targeting an exon of the Tyr gene. The successful mutation of the gene will delete one or both alleles. A bi-allelic null Tyr mouse will be albino, but otherwise healthy.

First, check you are in the correct directory.

`pwd`

It should display something like:

*`/home/manager/course_data/read_alignment`*

### 2.1 Viewing the reference genome

Go to the ref directory that contains the fasta files of the reference genomes: `cd ~/course_data/read_alignment/data/ref`

Fasta files (.fa) are used to store raw sequencing information before aligning data. A single chromosome from the mouse genome is contained in the file *GRCm38.68.dna.toplevel.chr7.fa.gz*

View the file with *zless* (we use *zless* instead of *less* because the file is compressed):

`zless GRCm38.68.dna.toplevel.chr7.fa.gz`

**Q1: What is the length of chromosome 7 of the mouse genome? (Hint: Look at the fasta header for chromosome 7)**

`................................................................................................`

Similar to a BAM file, to allow fast retrieval of data, an index file is often required. You should check for the presence of fasta indexes for the genome in the ‘*ref* ’ directory:

GRCm38.68.dna.toplevel.chr7.fa.gz.amb ... GRCm38.68.dna.toplevel.chr7.fa.gz.sa

These are created by BWA: suffixtrees, bwt transform etc.

If these index files don’t exist, then you can run the indexing with the command

`bwa index GRCm38.68.dna.toplevel.chr7.fa.gz`

Beware – this indexing process can take 3-5 minutes so please only run it if the index files do not exist!

### 2.2 Align the data with bwa

Go to the *\~/course_data/read_alignment/data/Exercise1/fastq/* directory - you can use this command:

`cd ../Exercise1/fastq`

Use the *bwa mem* command to align the fastq files to the mouse reference genome. By default *bwa* outputs SAM format directly to the standard output (in this case your terminal window), therefore you will have to redirect the result into a SAM file.

`bwa mem ../../ref/GRCm38.68.dna.toplevel.chr7.fa.gz md5638a_7_87000000_R1.fastq.gz md5638a_7_87000000_R2.fastq.gz > md5638.sam`

This may take a few minutes, please be patient.

### 2.3 Convert a SAM file to a BAM file

Now use *samtools* to convert the SAM file *md5638.sam* created in the previous step into a BAM file called *md5638.bam*.

`samtools view -O BAM -o md5638.bam md5638.sam`

**Q2: How much space is saved by using a BAM file instead of a SAM file?**

`................................................................................................`

### 2.4 Sort and index the BAM file

The BAM files produced by BWA are sorted by read name (same order as the original fastq files). However, most viewing and variant calling software require the BAM files to be sorted by reference coordinate position and indexed for rapid retrieval. Therefore, use ‘*samtools sort*’ to produce a new BAM file called *md5638.sorted.bam* that is sorted by position.

`samtools sort -T temp -O bam -o md5638.sorted.bam md5638.bam`

Finally index the sorted BAM file using ‘*samtools index*’ command.

Note: indexing a BAM file is also a good way to check that the BAM file has not been truncated (e.g. your disk becomes full when writing the BAM file). At the end of every BAM file, a special end of file (EOF) marker is written. The Samtools index command will first check for this and produce an error message if it is not found.

`samtools index md5638.sorted.bam`

### 2.5 Unix pipes to combine the commands together

To produce the sorted BAM file above we had to carry out several separate commands and produce intermediate files. The Unix pipe command allows you to feed the output of one command into the next command.

You can combine all of these commands together using unix pipes, and do all of this data processing together and avoid writing intermediate files. To do this type:

`bwa mem ../../ref/GRCm38.68.dna.toplevel.chr7.fa.gz md5638a_7_87000000_R1.fastq..gz md5638a_7_87000000_R2.fastq.gz | samtools view -O BAM - | samtools sort -T temp -O bam -o md5638_2.sorted.bam -`

Now index the BAM file:

`samtools index md5638_2.sorted.bam`

**Note: When the symbol - is used above, Unix will automatically replace - with the output produced by the preceding command (i.e. the command before the \| symbol).**

### 
2.6 Mark PCR Duplicates

We will use a program called ‘*MarkDuplicates*’ that is part of Picard tools (<http://picard.source-forge.net>) to remove PCR duplicates that may have been introduced during the library construction stage. To find the options for ‘*MarkDuplicates*’ – type:

`picard MarkDuplicates`

Now run *MarkDuplicates* using the ‘*I=*’ option to specify the input BAM file and the ‘*O=*’ option to specify the output file (e.g. *md5638.markdup.bam*). You will also need to specify the duplication metrics output file using ‘*M=*’ (e.g. *md5638.markdup.metrics*).

`picard MarkDuplicates I=md5638.sorted.bam O=md5638.markdup.bam M=md5638.metrics.txt`

**Q3: From looking at the output metrics file - how many reads were marked as duplicates? What was the percent duplication?**

`................................................................................................`

Don’t forget to generate an index for the new bam file using samtools.

`samtools index md5638.markdup.bam`

### 
2.7 Generate QC Stats

Use samtools to collect some statistics and generate QC plots from the alignment in the BAM file from the previous step. Make sure you save the output of the stats command to a file (e.g. md5638.markdup.stats).

`samtools stats md5638.markdup.bam > md5638.markdup.stats`

`plot-bamstats -p md5638_plot/ md5638.markdup.stats`

### 2.8 Exercises

Now look at the output and answer the following questions:

**Q4: What is the total number of reads?**

**Q5: What proportion of the reads were mapped?**

**Q6: How many reads were paired correctly/properly?**

**Q7: How many read pairs mapped to a different chromosome?**

**Q8: What is the insert size mean and standard deviation?**

In your web browser open the file called md5638_plot.html to view the QC information and answer the following questions:

**Q9: How many reads have zero mapping quality?**

**Q10: Which of the first fragments or second fragments are higher base quality on average?**

Congratulations you have succesfully aligned some NGS data to a reference genome! Now continue to the next section of the tutorial: Alignment visualisation.
